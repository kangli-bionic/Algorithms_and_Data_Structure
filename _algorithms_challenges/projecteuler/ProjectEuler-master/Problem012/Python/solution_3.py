#!/usr/bin/env python
# coding=utf-8
#   Python Script
#
#   Copyleft Â© Manoel Vilela
#
#

# Highly divisible triangular number
# Problem 12

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number
# to have over five hundred divisors?

from functools import reduce
from itertools import count


def trianglenums():
    for n in count(start=1, step=1):
        yield n * (n + 1) // 2


def divisors(n):
    exps = []
    i = 2
    while n > 1:
        count = 0
        while n % i == 0:
            n /= i
            count += 1
        if count != 0:
            exps.append(count + 1)
        i += 1
    return reduce(lambda x, y: x * y, exps, 1)


for i in trianglenums():
    if divisors(i) > 500:
        print(i)
        quit()
